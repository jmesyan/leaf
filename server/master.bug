package server

import (
	"github.com/jmesyan/leaf/conf"
	"github.com/jmesyan/leaf/network"
	"sync"
	)

const (
	KEEP_ALIVED_DURATION = 30 //s
)

type Master struct {
	OnlineNodes map[string]bool
	Cconf       *conf.ClusterConf
	WatchDog    *Server
	Childs      map[string]*AgentConn
	//Childs      *cluster.ChildMgr
	//TelnetServer   iface.Imaster
	sync.RWMutex
}

func (master *Master) Run(closeSig chan bool) {
	var wsServer *network.WSServer
	if master.WatchDog.WSAddr != "" {
		wsServer = new(network.WSServer)
		wsServer.Addr = master.WatchDog.WSAddr
		wsServer.MaxConnNum = master.WatchDog.MaxConnNum
		wsServer.PendingWriteNum = master.WatchDog.PendingWriteNum
		wsServer.MaxMsgLen = master.WatchDog.MaxMsgLen
		wsServer.HTTPTimeout = master.WatchDog.HTTPTimeout
		wsServer.CertFile = master.WatchDog.CertFile
		wsServer.KeyFile = master.WatchDog.KeyFile
		wsServer.NewAgent = func(conn *network.WSConn) network.Agent {
			a := &AgentConn{conn: conn, server: master.WatchDog}
			if master.WatchDog.Onconnected != nil {
				master.WatchDog.Onconnected(a)
			}
			return a
		}
	}

	var tcpServer *network.TCPServer
	if master.WatchDog.TCPAddr != "" {
		tcpServer = new(network.TCPServer)
		tcpServer.Addr = master.WatchDog.TCPAddr
		tcpServer.MaxConnNum = master.WatchDog.MaxConnNum
		tcpServer.PendingWriteNum = master.WatchDog.PendingWriteNum
		tcpServer.LenMsgLen = master.WatchDog.LenMsgLen
		tcpServer.MaxMsgLen = master.WatchDog.MaxMsgLen
		tcpServer.LittleEndian = master.WatchDog.LittleEndian
		tcpServer.NewAgent = func(conn *network.TCPConn) network.Agent {
			a := &AgentConn{conn: conn, server: master.WatchDog}
			if master.WatchDog.Onconnected != nil {
				master.WatchDog.Onconnected(a)
			}
			return a
		}
	}

	if wsServer != nil {
		wsServer.Start()
	}
	if tcpServer != nil {
		tcpServer.Start()
	}

	<-closeSig
	if wsServer != nil {
		wsServer.Close()
	}
	if tcpServer != nil {
		tcpServer.Close()
	}
}

func (master *Master) OnDestroy() {}

func (this *Master)CheckChildsAlive(params ...interface{}) {
	childs := this.Childs.GetChilds()
	for _, child := range childs {
		_, err := child.CallChildForResult("CheckAlive")
		if err == nil {
			continue
		}
		//节点掉线通知child节点的父节点
		remotes, err := GlobalMaster.Cconf.GetRemotesByName(child.GetName())
		if err == nil && len(remotes) > 0 {
			for _, remote := range remotes {
				remoteProxy, err := GlobalMaster.Childs.GetChild(remote)
				if err == nil {
					//child是子节点 true
					remoteProxy.CallChildNotForResult("NodeDownNtf", true, child.GetName())
				}
			}
		}
		//节点掉线通知child节点的子节点
		curChilds := GlobalMaster.Cconf.GetChildsByName(child.GetName())
		if len(curChilds) > 0 {
			for _, curChild := range curChilds {
				curChildProxy, err := GlobalMaster.Childs.GetChild(curChild)
				if err == nil {
					//child是父节点 false
					curChildProxy.CallChildNotForResult("NodeDownNtf", false, child.GetName())
				}
			}
		}
		this.Childs.RemoveChild(child.GetName())
	}
}
